/* eslint-disable camelcase */
import { createProtobufRpcClient, defaultRegistryTypes, GasPrice, QueryClient } from '@cosmjs/stargate'
import { Query, QueryClientImpl } from './_generated/polyibc/core/query'

import * as polyibc from './polyibc'

import { Registry, EncodeObject } from '@cosmjs/proto-signing'
import { Tendermint37Client } from '@cosmjs/tendermint-rpc'

import { Writer as ProtoWriter, Reader as ProtoReader } from 'protobufjs'
import { Any } from './_generated/google/protobuf/any'
export { polyibc }
export { MsgCreateClient } from './_generated/polyibc/core/tx'

export const chainPrefix = 'polymer'

export interface PolyIbcExtension {
  readonly polyibc: Query
}

/**
 * Extension func called by `stargate.QueryClient.withExtensions`
 * @param base stargate query client
 * @returns exposed x/polyibc queries
 */
export function setupPolyIbcExtension(base: QueryClient): PolyIbcExtension {
  return {
    polyibc: new QueryClientImpl(createProtobufRpcClient(base))
  }
}


/** Create a new TendermintClient with a RPC endpoint */
export const newTendermintClient = Tendermint37Client.connect

export { StargateClient, SigningStargateClient, QueryClient, GasPrice } from '@cosmjs/stargate'
export { Any } from './_generated/google/protobuf/any'

interface ProtoCodec<T> {
  encode: (message: T, writer?: ProtoWriter) => ProtoWriter
  decode: (input: ProtoReader | Uint8Array, length?: number) => T
}

interface msgEncodeObject<T> extends EncodeObject {
  readonly typeUrl: string
  readonly value: T
}

/**
 * Create a Any field from a message. Enforce type checking of the msg.
 * @param msg A protobuf message
 * @param codec Autogenerated codec for the message which includes encode/decode methods
 * @returns Any instance where the typeUrl is the same as the message's typeUrl, and the value is the encoded message
 * Uint8Array/bytes
 */
export function toAny<T>(msg: msgEncodeObject<T>, codec: ProtoCodec<T>): Any {
  return Any.fromPartial({ typeUrl: msg.typeUrl, value: codec.encode(msg.value).finish() })
}
